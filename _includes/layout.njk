<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{{ title }}</title>

    <!-- Google tag (gtag.js) -->
    <script
      async
      src="https://www.googletagmanager.com/gtag/js?id=G-HDVGGETD5Y"
    ></script>
    <script>
      window.dataLayer = window.dataLayer || [];
      function gtag() {
        dataLayer.push(arguments);
      }
      gtag("js", new Date());
      gtag("config", "G-HDVGGETD5Y");
    </script>

    <link
      rel="stylesheet"
      href="https://fonts.googleapis.com/css2?family=Inconsolata:wght@400;500;600;700&display=swap"
    />

    <script>
      // -------------------------------------------------
      // 1) Define color stops 0..24 hours
      // -------------------------------------------------
      const colorStops = [
        { time: 0,  color: "#041d33" }, // Midnight
        { time: 4,  color: "#072d4e" }, // 4 AM
        { time: 6,  color: "#fceba8" }, // 6 AM
        { time: 8,  color: "#ededed" }, // 8 AM
        { time: 12,  color: "#edead8" }, // Noon
        { time: 16,  color: "#ededed" }, // 4 PM
        { time: 18, color: "#fcada8" }, // 6 PM
        { time: 20, color: "#072d4e" }, // 8 PM
        { time: 24, color: "#041d33" }, // Midnight again
      ];

      // -------------------------------------------------
      // 2) REAL-TIME: Get color from actual clock
      // -------------------------------------------------
      function getRealTime() {
        const now = new Date();
        const hour = now.getHours();
        const minute = now.getMinutes();
        const second = now.getSeconds();
        const currentTime = hour + minute / 60 + second / 3600;
        return currentTime;
      }

      // -------------------------------------------------
      // 3) SCROLL: Map scroll fraction -> time
      // -------------------------------------------------
      function getColor() {

        const currentTime = getRealTime() + 18;

        const docHeight =
          document.documentElement.scrollHeight - window.innerHeight;
        const scrollTop = window.scrollY;
        let fraction = 0;
        if (docHeight > 0) {
          fraction = scrollTop / docHeight;
        }
        // 0..1 => 0..24 hours
        let scrubbedTime = fraction * 1 / 4;

        if (currentTime < 4.5 && currentTime + scrubbedTime > 4.5){
scrubbedTime = 4.5 - currentTime
        }

        {# if (currentTime < 19 && currentTime + scrubbedTime > 19){
scrubbedTime = 18 - currentTime
        } #}

        console.log((currentTime + scrubbedTime) % 24)

        return interpolateTimeStops((currentTime + scrubbedTime) % 24);
      }

      // -------------------------------------------------
      // 4) Common function to interpolate color from time
      // -------------------------------------------------
      function interpolateTimeStops(currentTime) {
        let startStop, endStop;
        for (let i = 0; i < colorStops.length - 1; i++) {
          const s = colorStops[i];
          const n = colorStops[i + 1];
          if (currentTime >= s.time && currentTime < n.time) {
            startStop = s;
            endStop = n;
            break;
          }
        }
        // Handle edge if currentTime >= 24
        if (!startStop || !endStop) {
          startStop = colorStops[colorStops.length - 2];
          endStop = colorStops[colorStops.length - 1];
        }

        const range = endStop.time - startStop.time;
        const elapsed = currentTime - startStop.time;
        const t = elapsed / range; // fraction 0..1

        const baseColor = interpolateColor(startStop.color, endStop.color, t);

        const mainColor = lightenDarkenColor(baseColor, -30);
        // Add a second color for a 45Â° gradient
        const altColor = lightenDarkenColor(mainColor, 30);

        // Decide if it's "night" or "day" for text color
        const isNight = currentTime > 19 || currentTime <= 4.5;
        document.documentElement.classList.toggle("night", isNight);
        document.documentElement.classList.toggle("day", !isNight);

        // Return final gradient string
        return `linear-gradient(45deg, ${mainColor}, ${altColor})`;
      }

      // -------------------------------------------------
      // 5) Apply the background gradient
      // -------------------------------------------------
      function applyBackground(gradient) {
        // fixed, cover-based background
        document.documentElement.style.background = gradient;
        document.documentElement.style.backgroundAttachment = "fixed";
      }

      // -------------------------------------------------
      // 6) Helpers
      // -------------------------------------------------
      function interpolateColor(color1, color2, t) {
        const c1 = hexToRgb(color1);
        const c2 = hexToRgb(color2);
        const r = Math.round(c1.r + (c2.r - c1.r) * t);
        const g = Math.round(c1.g + (c2.g - c1.g) * t);
        const b = Math.round(c1.b + (c2.b - c1.b) * t);
        return rgbToHex(r, g, b);
      }

      function lightenDarkenColor(hex, amt) {
        const c = hexToRgb(hex);
        const r = clamp(c.r + amt, 0, 255);
        const g = clamp(c.g + amt, 0, 255);
        const b = clamp(c.b + amt, 0, 255);
        return rgbToHex(r, g, b);
      }

      function hexToRgb(hex) {
        hex = hex.replace(/^#/, "");
        const bigint = parseInt(hex, 16);
        return {
          r: (bigint >> 16) & 255,
          g: (bigint >> 8) & 255,
          b: bigint & 255,
        };
      }

      function rgbToHex(r, g, b) {
        return (
          "#" +
          r.toString(16).padStart(2, "0") +
          g.toString(16).padStart(2, "0") +
          b.toString(16).padStart(2, "0")
        );
      }

      function clamp(val, min, max) {
        return Math.min(Math.max(val, min), max);
      }

      // -------------------------------------------------
      // 7) Attach listeners for SCROLL + setInterval
      // -------------------------------------------------
      document.addEventListener("DOMContentLoaded", () => {
        // A) On load, set to real-time color
        applyBackground(getColor());

        // B) SCROLL: override color with scroll fraction
        window.addEventListener("scroll", () => {
          applyBackground(getColor());
        });
        window.addEventListener("resize", () => {
          applyBackground(getColor());
        });

        // C) INTERVAL: every 60s, update real-time color
        setInterval(() => {
          applyBackground(getColor());
        }, 60 * 1000);
      });
    </script>

    <style>
      /* Make sure the background is fixed and covers the viewport */
      html,
      body {
        font-family: "Inconsolata", monospace;
        margin: 0;
        padding: 0;
        min-height: 100vh;
        background-size: cover;
      }

      strong,
      b {
        font-weight: 700; 
      }

      p {
        line-height: 1.5;
      }

      ul, ol, li {
        margin-top: 0.25rem;
        margin-bottom: 0.25rem;
        line-height: 1.5;
      }

      h1 {
        padding-top: 1rem;
        font-weight: 600; 
      }

      h2 {
        padding-top: 1rem;
        font-weight: 600; 
      }
      p,
      li,
      a {
        overflow-wrap: break-word; 
        word-wrap: break-word; 
        word-break: break-word;
      }

      ul,
      ol {
        margin-left: 2rem;
        padding-left: 0;
      }

      th, td {
        padding: 0.25rem;
      }

      th:last-child, td:last-child  {
        padding-left: 2rem;
      }
      
      table {
        margin-bottom: 2rem;
      }

      @media (max-width: 600px) {
        ul,
        ol {
          margin-left: 1rem;
        }
      }

      footer {
        padding-top: 2rem;
      }

      .container {
        max-width: 75rem;
        margin: 0 auto;
        padding: 1rem;
      }

      /* Text color for "night" or "day" */
      .night {
        color: rgb(176, 176, 176);
      }
      
      /* .night: unvisited and visited links */
      .night a:link{
        color: rgb(212, 119, 119);
        text-decoration: underline;
      }
      
      .night a:visited {
        color: rgb(174, 107, 107);
        text-decoration: underline;
      }

      /* .night: hover and active states */
      .night a:hover,
      .night a:active {
        color: rgb(222, 222, 222);  /* pure white on hover/active for contrast */
        text-decoration: none; /* remove underline on hover, if preferred */
      }

      .day {
        color:rgb(1, 1, 32);
      }
      
      /* .day: unvisited and visited links */
      .day a:link{
        color: rgb(6, 67, 200);
        text-decoration: underline;
      }
      
      .day a:visited {
        color: rgb(50, 88, 162);
        text-decoration: underline;
      }

      /* .day: hover and active states */
      .day a:hover,
      .day a:active {
        color: rgb(5, 36, 115);  /* pure white on hover/active for contrast */
        text-decoration: none; /* remove underline on hover, if preferred */
      }
    </style>
  </head>

  <body>
    <div class="container">
      <header></header>
      <!-- This is where the content from syllabus.md goes -->
      {{ content | safe }}
      <footer>
        <p>
          &copy; 2025 <a href="https://danilnagy.com">Danil Nagy</a>
          {% if page.fileSlug %}
            |
            <a
              href="https://github.com/danilnagy/generative-design/blob/main/{{ page.fileSlug }}.md"
            >
              View source
            </a>
          {% endif %}
        </p>
      </footer>
    </div>
  </body>
</html>
